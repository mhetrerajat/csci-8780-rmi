/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'

    // rmi
//    implementation 'com.sun.jmx:jmxri:1.2.1'
//    implementation 'com.sun.jdmk:jmxtools:1.2.1'
//    implementation group: 'javax.management', name: 'jmxremote', version: '1.0.1'
}

application {
    // Define the main class for the application.
    mainClass = 'rmiproject.RMIClientMain'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// task to start the RMI Registry
tasks.register('startRMIRegistry', JavaExec) {
    description = 'Start the RMI Registry'
    mainClass = 'sun.rmi.registry.RegistryImpl'
    classpath = sourceSets.main.runtimeClasspath
    args '1099'
}

// task to run the RMI Client
tasks.register('runRMIClient', JavaExec) {
    description = 'Run the RMI Client'
    mainClass = 'RMIClientMain'
    classpath = sourceSets.main.runtimeClasspath
    args 'Hello, RMI Server!'
    dependsOn tasks.startRMIRegistry
}

// task to run the RMI Server
tasks.register('runRMIServer', JavaExec) {
    description = 'Run the RMI Server'
    mainClass = 'RMIServerMain'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn tasks.startRMIRegistry
}