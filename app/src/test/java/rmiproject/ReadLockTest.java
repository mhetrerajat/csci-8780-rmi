/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package rmiproject;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

import java.rmi.RemoteException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.stream.IntStream;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

class ReadLockTest {

    private RemoteStringArrayImpl remoteArray;

    @BeforeEach
    public void setUp() throws RemoteException {
        int capacity = 5;
        remoteArray = new RemoteStringArrayImpl(capacity);
        String[] initVals = { "a", "b", "c" };
        IntStream.range(0, initVals.length).forEach(i -> {
            try {
                remoteArray.insertArrayElement(i, initVals[i]);
            } catch (RemoteException e) {
                e.printStackTrace();
            }
        });

    }

    @Test
    void testLockAcquisitionSuccess() throws RemoteException {
        boolean result = remoteArray.requestReadLock(1, 123);
        assertTrue(result);
    }

    @Test
    public void testMultipleClientsReadingSameLock() throws RemoteException, InterruptedException, ExecutionException {
        ExecutorService executorService = Executors.newFixedThreadPool(2); // Two threads for two clients

        // give read lock first
        Future<Boolean> readLockResultClientOne = executorService.submit(() -> remoteArray.requestReadLock(4, 111));
        // try to get same lock for different client
        Future<Boolean> readLockResultClientTwo = executorService.submit(() -> remoteArray.requestReadLock(4, 222));

        // Get the results from the threads
        boolean readLockAcquiredClientOne = readLockResultClientOne.get();
        boolean readLockAcquiredClientTwo = readLockResultClientTwo.get();

        assertTrue(readLockAcquiredClientOne);
        assertTrue(readLockAcquiredClientTwo);

        executorService.shutdown();
    }

    @Test
    public void testFetchElementReadSuccess() throws RemoteException {
        String result = remoteArray.fetchElementRead(1, 123);
        assertEquals("b", result);
    }

    @Test
    public void testFetchElementReadLockFailure() throws RemoteException {
        // Scenario: fetch without read permission

        // Mock read request lock to return False
        RemoteStringArrayImpl remoteArraySpy = Mockito.spy(remoteArray);
        when(remoteArraySpy.requestReadLock(2, 456)).thenReturn(false);

        // test
        String result = remoteArraySpy.fetchElementRead(2, 456);
        assertNull(result);
    }

}
